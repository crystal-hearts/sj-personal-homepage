@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Colors are defined in globals.css instead of Tailwind config */
  /* This allows for color transitions by adjusting the --theme-color variables instead of adjusting the DOM */

  --black: #171717;

  --ube-100: #f1f1f7;
  --ube-300: #b7b7d7;
  --ube-500: #8989b0;
  --ube-700: #24244a;
  --ube-900: #0f0f25;

  --raspberry-100: #f7f1f7;
  --raspberry-300: #d7b7d7;
  --raspberry-500: #b089b0;
  --raspberry-700: #4a244a;
  --raspberry-900: #250f25;

  --strawberry-100: #f7f1f1;
  --strawberry-300: #d7b7b7;
  --strawberry-500: #b08989;
  --strawberry-700: #4a2424;
  --strawberry-900: #250f0f;

  --lemon-100: #f7f7f1;
  --lemon-300: #d7d7b7;
  --lemon-500: #b0b089;
  --lemon-700: #4a4a24;
  --lemon-900: #25250f;

  --lime-100: #f1f7f1;
  --lime-300: #b7d7b7;
  --lime-500: #89b089;
  --lime-700: #244a24;
  --lime-900: #0f250f;

  --mint-100: #f1f7f7;
  --mint-300: #b7d7d7;
  --mint-500: #89b0b0;
  --mint-700: #244a4a;
  --mint-900: #0f2525;
}

@layer utilities {
  /* Color utility classes, taking advantage of the root colors */
  /* This data attribute is set on the root page element below <html> and all child classes refer to these variables */
  /* This is a bit verbose for my tastes, but it's ultimately a pretty clean method of achieving this */
  /* This sort of theme-changing effect could have also been achieved with React state management, but in many cases that would have been overkill */

  [data-theme-color="ube"] {
    --theme-color-100: var(--ube-100);
    --theme-color-300: var(--ube-300);
    --theme-color-500: var(--ube-500);
    --theme-color-700: var(--ube-700);
    --theme-color-900: var(--ube-900);
  }

  [data-theme-color="raspberry"] {
    --theme-color-100: var(--raspberry-100);
    --theme-color-300: var(--raspberry-300);
    --theme-color-500: var(--raspberry-500);
    --theme-color-700: var(--raspberry-700);
    --theme-color-900: var(--raspberry-900);
  }

  [data-theme-color="strawberry"] {
    --theme-color-100: var(--strawberry-100);
    --theme-color-300: var(--strawberry-300);
    --theme-color-500: var(--strawberry-500);
    --theme-color-700: var(--strawberry-700);
    --theme-color-900: var(--strawberry-900);
  }

  [data-theme-color="lemon"] {
    --theme-color-100: var(--lemon-100);
    --theme-color-300: var(--lemon-300);
    --theme-color-500: var(--lemon-500);
    --theme-color-700: var(--lemon-700);
    --theme-color-900: var(--lemon-900);
  }

  [data-theme-color="lime"] {
    --theme-color-100: var(--lime-100);
    --theme-color-300: var(--lime-300);
    --theme-color-500: var(--lime-500);
    --theme-color-700: var(--lime-700);
    --theme-color-900: var(--lime-900);
  }

  [data-theme-color="mint"] {
    --theme-color-100: var(--mint-100);
    --theme-color-300: var(--mint-300);
    --theme-color-500: var(--mint-500);
    --theme-color-700: var(--mint-700);
    --theme-color-900: var(--mint-900);
  }

  /* If the data attribute animation-play-state is set and set to "paused", set all child elements that use the global animation playstate to paused */
  /* This is similar logic to the color attributes, but slightly different due to animation-play-state not accepting a variable as a value */
  /* A wildcard class selector is required as classnames inside SVG files aren't perfectly preserved */
  [data-animation-play-state="paused"] {
    [class*="has-global-animation-play-state"] {
      animation-play-state: paused;
    }
  }

  /* Setting the value of --nth-child-index to match nth-child allows it to be used in calc() */
  /* This allows us to achieve the "wave" animation effect on any arbitray group of elements */
  :nth-child(1) {
    --nth-child-index: 1;
  }

  :nth-child(2) {
    --nth-child-index: 2;
  }

  :nth-child(3) {
    --nth-child-index: 3;
  }

  :nth-child(4) {
    --nth-child-index: 4;
  }

  :nth-child(5) {
    --nth-child-index: 5;
  }

  :nth-child(6) {
    --nth-child-index: 6;
  }

  :nth-child(7) {
    --nth-child-index: 7;
  }

  :nth-child(8) {
    --nth-child-index: 8;
  }

  :nth-child(9) {
    --nth-child-index: 9;
  }

  :nth-child(10) {
    --nth-child-index: 10;
  }

  :nth-child(11) {
    --nth-child-index: 11;
  }

  :nth-child(12) {
    --nth-child-index: 12;
  }
}

@layer components {
  [class*="logo-letter"] {
    --delay-step-increment: 0.25s;
    --animation-length: 3s;
    animation: wave-y-5 var(--animation-length) ease-in-out infinite;
    animation-delay: calc(
      var(--delay-step-increment) * (var(--nth-child-index) * -1)
    );
  }
}
